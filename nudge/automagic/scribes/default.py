#
# Copyright (C) 2011 Evite LLC

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import os

from nudge.utils import Dict

from jinja2 import Environment, FileSystemLoader

#TODO make this better...
template_dir = "/".join(__file__.split("/")[0:-1]) + "/../templates" 
template_env = Environment(loader=FileSystemLoader(template_dir))

__all__ = [
    'get_template',
    'DefaultGenerator',
]

def get_template(filename=None):
    assert filename, "I need a filename, smartypants"
    text=None
    filepath = os.path.join(template_dir, filename)
    assert os.path.exists(filepath), "The template file doesn't exist"
    text = open(filepath, "r").read()
    assert text, "How about some text"
    return template_env.get_template(filename)

class DefaultGenerator(object):
    extension = 'txt'
    template = get_template('default.txt')

    def __init__(self, dir='/tmp', filename='autogenerated_output'):
        self.dir = dir
        if not os.path.exists(dir):
            os.makedirs(dir)
        self.filename = filename
        self.output_file = self._filepath(self.filename)
        self.ensure_output_file()

    def _filepath(self, filename, subdir=None, extension=None):
        dir = self.dir 
        if subdir:
            dir += '/' + subdir
        if not os.path.exists(dir):
            os.makedirs(dir)
        extension = extension or self.extension
        full_path = os.path.join(dir,'%s.%s' % (filename, extension))
        return full_path

    def ensure_output_file(self, overwrite=False):
        if not os.path.exists(self.output_file):
            return True
        if overwrite:
            os.remove(self.output_file)
            return True
        raise Exception("This filename already exists.  Please remove it.")

    def generate(self, project):
        data = self._prepare_data(Dict(project))
        self._render_and_write(self.template, data, self.output_file)

    def _render_and_write(self, template, data, filename):
        result = template.render(data)
        file = open(filename, 'wr')
        file.write(result)
        file.close()
        

    def _prepare_data(self, project):
        return {'project':project}


class JSClient(DefaultGenerator):
    extension = 'js'
    template = get_template('javascript.js')



